<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">


    <!-- Activates annotation-based bean configuration -->
    <context:annotation-config/>

    <!--开启这个配置，spring才能识别@Scheduled注解-->
    <task:annotation-driven/>

    <!-- Scans for application @Components to deploy -->
    <context:component-scan base-package="com.agent.czb">
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
    </context:component-scan>

    <!-- cacheManager, 指定ehcache.xml的位置 -->
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <!-- 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
        <property name="shared" value="true"/>
    </bean>

    <!--声明cacheManager-->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean>

    <!-- 数据库配置文件位置 -->
    <context:property-placeholder location="classpath:config/dataSource.properties"/>

    <!-- 配置 c3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!-- 数据库驱动 -->
        <property name="driverClass" value="${datasource.driverClassName}"/>
        <!-- 连接URL串 -->
        <property name="jdbcUrl" value="${datasource.url}"/>
        <!-- 连接用户名 -->
        <property name="user" value="${datasource.username}"/>
        <!-- 连接密码 -->
        <property name="password" value="${datasource.password}"/>
        <!-- 初始化连接池时连接数量为5个 -->
        <property name="initialPoolSize" value="${datasource.initialPoolSize}"/>
        <!-- 允许最小连接数量为5个 -->
        <property name="minPoolSize" value="${datasource.minPoolSize}"/>
        <!-- 允许最大连接数量为20个 -->
        <property name="maxPoolSize" value="${datasource.maxPoolSize}"/>
        <!-- 允许连接池最大生成100个PreparedStatement对象 -->
        <property name="maxStatements" value="100"/>
        <!-- 连接有效时间，连接超过3600秒未使用，则该连接丢弃 -->
        <property name="maxIdleTime" value="3600"/>
        <!-- 连接用完时，一次产生的新连接步进值为2 -->
        <property name="acquireIncrement" value="2"/>
        <!-- 获取连接失败后再尝试10次，再失败则返回DAOException异常 -->
        <property name="acquireRetryAttempts" value="5"/>
        <!-- 获取下一次连接时最短间隔600毫秒，有助于提高性能 -->
        <property name="acquireRetryDelay" value="600"/>
        <!-- 检查连接的有效性，此处小弟不是很懂什么意思 -->
        <property name="testConnectionOnCheckin" value="true"/>
        <!-- 每个1200秒检查连接对象状态 -->
        <property name="idleConnectionTestPeriod" value="1200"/>
        <!-- 获取新连接的超时时间为10000毫秒 -->
        <property name="checkoutTimeout" value="10000"/>
    </bean>

    <!-- 使用JDBC事物 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- AOP配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="query*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="list*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="get*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="select*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置AOP切面 -->
    <aop:config>
        <aop:pointcut id="transactionPointcut"
                      expression="execution(* com.agent.czb.web..service.*.*(..)) || execution(* com.agent.czb.service..service.*.*(..)) || execution(* com.agent.czb.core..service.*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config>

    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效-->
        <property name="configLocation" value="classpath:config/sqlMapConfig.xml"/>
        <!-- 指定pojo别名，根据包路径查找 -->
        <!--<property name="typeAliasesPackage" value="com.kdb.jf.core.manage.model"/>-->
        <!-- 指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->
        <property name="mapperLocations" value="classpath*:mapper/*/*Mapper.xml"/>
    </bean>

    <!-- 配置SQLSession模板 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 扫描mapper.java  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.agent.czb.core.*.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- Spring 工具类 -->
    <bean id="springContextUtil" class="com.agent.czb.common.spring.SpringContextUtil"/>

</beans>